{"version":3,"sources":["components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","api/api.ts","App.tsx","index.tsx"],"names":["TodoList","todos","onUserSelect","selectedUserId","className","map","todo","classNames","completed","htmlFor","id","type","checked","readOnly","title","userId","onClick","CurrentUser","useState","user","setUser","useEffect","fetch","then","response","json","userFromServer","name","email","phone","App","setSelectedUserId","setTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"uTAYaA,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,eAAxB,OACvC,sBAAKC,UAAU,WAAf,UACE,wCAEA,qBAAKA,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBACEF,UAAWG,IACT,iBACA,CAAE,6BAA8BD,EAAKE,WACrC,CAAE,0BAA2BF,EAAKE,YAJtC,UAQE,wBAAOC,QAAO,UAAKH,EAAKI,IAAxB,UACE,uBACEC,KAAK,WACLD,GAAE,UAAKJ,EAAKI,IACZE,QAASN,EAAKE,UACdK,UAAQ,IAEV,4BAAIP,EAAKQ,WAGX,wBACEV,UAAWG,IACT,wBACA,CAAE,kCAAmCJ,IAAmBG,EAAKS,QAC7D,UAEFJ,KAAK,SACLK,QAAS,kBAAMd,EAAaI,EAAKS,SAPnC,yBASYT,EAAKS,YArBZT,EAAKI,eChBTO,G,MAA+B,SAAC,GAAgB,IAAdF,EAAa,EAAbA,OAC7C,EAAwBG,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAOA,OALAC,qBAAU,WCDe,IAACX,KDEZK,ECDPO,MAAM,GAAD,OARQ,4CAQR,OAAoBZ,IAC7Ba,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WDCxBF,MAAK,SAAAG,GAAc,OAAIN,EAAQM,QACjC,CAACX,IAGF,sBAAKX,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,+DAAyBe,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAMT,QAElE,oBAAIN,UAAU,oBAAd,gBAAmCe,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMQ,OACzC,mBAAGvB,UAAU,qBAAb,gBAAmCe,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMS,QACzC,mBAAGxB,UAAU,qBAAb,gBAAmCe,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMU,aEiBhCC,EAhCO,WACpB,MAA4CZ,mBAAS,GAArD,mBAAOf,EAAP,KAAuB4B,EAAvB,KACA,EAA0Bb,mBAAiB,IAA3C,mBAAOjB,EAAP,KAAc+B,EAAd,KAEAX,qBAAU,WDLHC,MAJa,2CAKjBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCMxBF,MAAK,SAAAU,GACJD,EAASC,SAQf,OACE,sBAAK7B,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAUH,MAAOA,EAAOC,aAPT,SAACQ,GACpBqB,EAAkBrB,IAMsCP,eAAgBA,MAGtE,qBAAKC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGD,EACC,cAAC,EAAD,CAAaY,OAAQZ,IACnB,2BC9Bd+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.86f6e1c7.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  onUserSelect: (id: number) => void,\n  selectedUserId: number\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, onUserSelect, selectedUserId }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            className={classNames(\n              'TodoList__item',\n              { 'TodoList__item--unchecked': !todo.completed },\n              { 'TodoList__item--checked': todo.completed },\n            )}\n            key={todo.id}\n          >\n            <label htmlFor={`${todo.id}`}>\n              <input\n                type=\"checkbox\"\n                id={`${todo.id}`}\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames(\n                'TodoList__user-button',\n                { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n                'button',\n              )}\n              type=\"button\"\n              onClick={() => onUserSelect(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUserById } from '../../api/api';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUserById(userId)\n      .then(userFromServer => setUser(userFromServer));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst API_TODOS_URL = 'https://mate.academy/students-api/todos';\nconst API_USERS_URL = 'https://mate.academy/students-api/users/';\n\nexport const getAllTodos = (): Promise<Todo[]> => {\n  return fetch(API_TODOS_URL)\n    .then(response => response.json());\n};\n\nexport const getUserById = (id: number): Promise<User> => {\n  return fetch(`${API_USERS_URL}${id}`)\n    .then(response => response.json());\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './types/Todo';\nimport { getAllTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getAllTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      });\n  });\n\n  const onUserSelect = (id: number) => {\n    setSelectedUserId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList todos={todos} onUserSelect={onUserSelect} selectedUserId={selectedUserId} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}